{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterController\/newUser(request:)"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"newUser","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Vapor7RequestC","text":"Request"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:5Vapor8ResponseC","text":"Response","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"request","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Vapor request to the endpoint "},{"identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterUserDto","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Entity "},{"isActive":true,"identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/UserDto","type":"reference"},{"text":" with new generated ","type":"text"},{"code":"id","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new user account in the system. After registration, the user can use the system, but until he confirms his e-mail address,"},{"type":"text","text":" "},{"type":"text","text":"access is limited. For example, the user cannot add new statuses. It is also recommended to configure "},{"type":"codeVoice","code":"reCaptcha"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which will prevent bots from creating accounts.","type":"text"}]},{"inlineContent":[{"text":"During account creation process server will send to the user inbox email with information how to confirm his email address.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the email there will be link with address to the client application (from "},{"type":"codeVoice","code":"redirectBaseUrl"},{"type":"text","text":"). Client application should"},{"text":" ","type":"text"},{"type":"text","text":"serve the page will can retrieve two parameters:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"token","type":"codeVoice"},{"text":" - string, GUID","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"userId","type":"codeVoice"},{"type":"text","text":" - new user identifier"}]}]}]},{"inlineContent":[{"text":"Client application have to read that parameters and use endpoint ","type":"text"},{"type":"codeVoice","code":"POST \/api\/v1\/account\/email\/confirm"},{"text":" to confirm the email.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Endpoint URL: "},{"type":"codeVoice","code":"\/api\/v1\/account\/register"},{"type":"text","text":"."}]}],"name":"Important","type":"aside","style":"important"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"CURL request:","type":"text"}],"type":"strong"}]},{"syntax":"bash","type":"codeListing","code":["curl \"https:\/\/example.com\/api\/v1\/register\" \\","-X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ ... }'"]},{"inlineContent":[{"inlineContent":[{"text":"Example request body:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"code":["{","    \"userName\": \"johndoe\",","    \"email\": \"johndoe@email.com\",","    \"password\": \"P@ssword1!\",","    \"redirectBaseUrl\": \"https:\/\/example.com\",","    \"agreement\": true,","    \"name\": \"John Doe\",","    \"bio\": \"I'm a photographer...\",","    \"securityToken\": \"435nkerguh8734bwbrg\",","    \"locale\": \"en_US\",","    \"reason\": \"I would like to share with you my photos...\",","    \"inviteToken\": \"34egdfert9fyg7d8fbt9sd\"","}"],"type":"codeListing","syntax":"json"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example response body (200 OK):","type":"text"}]}]},{"type":"codeListing","syntax":"json","code":["{","    \"id\": \"7243149752689283073\",","    \"userName\": \"johndoe\",","    \"account\": \"johndoe@example.com\",","    \"email\": \"johndoe@email.com\",","    \"name\": \"John Doe\",","    \"bio\": \"I'm a photographer...\",","    \"avatarUrl\": \"https:\/\/example.com\/storage\/454kwffvsr453sdfsd2345wevsdf.jpg\"","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example response body (field validation):","type":"text"}]}]},{"type":"codeListing","syntax":"json","code":["{","    \"code\": \"validationError\",","    \"reason\": \"Validation errors occurs.\",","    \"failures\": [","        {","            \"field\": \"email\",","            \"failure\": \"is not a valid email address\"","        },","        {","            \"field\": \"redirectBaseUrl\",","            \"failure\": \"is an invalid URL\"","        }","    ],","    \"error\": true","}"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example response body (business logic validation):"}],"type":"strong"}]},{"code":["{","    \"code\": \"userNameIsAlreadyTaken\",","    \"reason\": \"User with provided user name already exists in the system.\"","}"],"type":"codeListing","syntax":"json"},{"name":"Throws","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Validation.validationError"},{"text":" if validation errors occurs.","type":"text"}]}],"type":"aside"},{"content":[{"inlineContent":[{"type":"text","text":""},{"code":"RegisterError.securityTokenIsMandatory","type":"codeVoice"},{"type":"text","text":" if security token is mandatory (it should be provided from Google reCaptcha)."}],"type":"paragraph"}],"name":"Throws","type":"aside","style":"note"},{"name":"Throws","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"RegisterError.securityTokenIsInvalid"},{"text":" if security token is invalid (Google reCaptcha API returned that information).","type":"text"}],"type":"paragraph"}]},{"name":"Throws","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"RegisterError.userNameIsAlreadyTaken"},{"text":" if user with provided user name already exists in the system.","type":"text"}],"type":"paragraph"}],"style":"note"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"RegisterError.emailIsAlreadyConnected","type":"codeVoice"},{"text":" if email is already connected with other account.","type":"text"}]}],"style":"note","type":"aside","name":"Throws"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"RegisterError.missingEmail","type":"codeVoice"},{"text":" if email has not been specified but itâ€™s mandatory.","type":"text"}]}],"name":"Throws","type":"aside"},{"style":"note","name":"Throws","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"RegisterError.missingEmailConfirmationGuid","type":"codeVoice"},{"text":"if email confirmation guid has not been generated.","type":"text"}],"type":"paragraph"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"RegisterError.registrationIsDisabled","type":"codeVoice"},{"type":"text","text":"if registration is disabled."}]}],"type":"aside","name":"Throws"},{"content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"RegisterError.userHaveToAcceptAgreement"},{"type":"text","text":" if user have to accept agreement."}],"type":"paragraph"}],"name":"Throws","type":"aside","style":"note"},{"type":"aside","name":"Throws","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"RegisterError.reasonIsMandatory","type":"codeVoice"},{"type":"text","text":" if reason is mandatory when only registration by approval is enabled."}]}],"style":"note"},{"type":"aside","style":"note","name":"Throws","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"RegisterError.invitationTokenIsInvalid"},{"text":" if invitation token is invalid.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"RegisterError.invitationTokenHasBeenUsed"},{"type":"text","text":" if invitation token has been used."}]}],"type":"aside","style":"note","name":"Throws"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"RegisterError.userIdNotExists","type":"codeVoice"},{"text":" if user Id not exists. Probably saving of the user entity failed.","type":"text"}]}],"name":"Throws"}]}],"variants":[{"paths":["\/documentation\/vernissageserver\/registercontroller\/newuser(request:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/VernissageServer\/documentation\/VernissageServer","doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterController"]]},"abstract":[{"text":"Register new user.","type":"text"}],"metadata":{"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"newUser","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Request","preciseIdentifier":"s:5Vapor7RequestC"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:5Vapor8ResponseC","kind":"typeIdentifier","text":"Response"}],"externalID":"s:16VernissageServer18RegisterControllerC7newUser7request5Vapor8ResponseCAF7RequestC_tYaKF","role":"symbol","title":"newUser(request:)","modules":[{"name":"VernissageServer"}],"roleHeading":"Instance Method"},"sections":[],"references":{"doc://VernissageServer/documentation/VernissageServer/RegisterController":{"kind":"symbol","identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterController","abstract":[{"type":"text","text":"Controller for adding new user into the system."}],"url":"\/documentation\/vernissageserver\/registercontroller","title":"RegisterController","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RegisterController"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RegisterController","kind":"identifier"}]},"doc://VernissageServer/documentation/VernissageServer/RegisterController/newUser(request:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/vernissageserver\/registercontroller\/newuser(request:)","type":"topic","abstract":[{"text":"Register new user.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"newUser","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"preciseIdentifier":"s:5Vapor7RequestC","text":"Request","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Response","kind":"typeIdentifier","preciseIdentifier":"s:5Vapor8ResponseC"}],"title":"newUser(request:)","identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterController\/newUser(request:)"},"doc://VernissageServer/documentation/VernissageServer":{"url":"\/documentation\/vernissageserver","role":"collection","identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer","kind":"symbol","abstract":[{"text":"Application which is main API component for Vernissage photos sharing platform.","type":"text"}],"title":"VernissageServer","type":"topic"},"doc://VernissageServer/documentation/VernissageServer/RegisterUserDto":{"kind":"symbol","title":"RegisterUserDto","abstract":[],"url":"\/documentation\/vernissageserver\/registeruserdto","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegisterUserDto"}],"identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/RegisterUserDto","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RegisterUserDto","kind":"identifier"}],"role":"symbol"},"doc://VernissageServer/documentation/VernissageServer/UserDto":{"type":"topic","url":"\/documentation\/vernissageserver\/userdto","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UserDto","kind":"identifier"}],"abstract":[],"kind":"symbol","title":"UserDto","identifier":"doc:\/\/VernissageServer\/documentation\/VernissageServer\/UserDto","navigatorTitle":[{"kind":"identifier","text":"UserDto"}],"role":"symbol"}}}